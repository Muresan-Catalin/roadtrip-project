import React, { useState, useEffect } from "react";
import { getCities } from "../api/cities";
import "../styles/CityAutocompleteStyle.css";

export default function CityAutocomplete({ countryName, onChange }) {
  const [allCities, setAllCities] = useState([]);
  const [query, setQuery] = useState("");
  const [showSuggestions, setShowSuggestions] = useState(false);

  const europeFlags = {
    AL: "ðŸ‡¦ðŸ‡±",
    AD: "ðŸ‡¦ðŸ‡©",
    AM: "ðŸ‡¦ðŸ‡²",
    AT: "ðŸ‡¦ðŸ‡¹",
    AZ: "ðŸ‡¦ðŸ‡¿",
    BY: "ðŸ‡§ðŸ‡¾",
    BE: "ðŸ‡§ðŸ‡ª",
    BA: "ðŸ‡§ðŸ‡¦",
    BG: "ðŸ‡§ðŸ‡¬",
    HR: "ðŸ‡­ðŸ‡·",
    CY: "ðŸ‡¨ðŸ‡¾",
    CZ: "ðŸ‡¨ðŸ‡¿",
    DK: "ðŸ‡©ðŸ‡°",
    EE: "ðŸ‡ªðŸ‡ª",
    FI: "ðŸ‡«ðŸ‡®",
    FR: "ðŸ‡«ðŸ‡·",
    GE: "ðŸ‡¬ðŸ‡ª",
    DE: "ðŸ‡©ðŸ‡ª",
    GR: "ðŸ‡¬ðŸ‡·",
    HU: "ðŸ‡­ðŸ‡º",
    IS: "ðŸ‡®ðŸ‡¸",
    IE: "ðŸ‡®ðŸ‡ª",
    IT: "ðŸ‡®ðŸ‡¹",
    KZ: "ðŸ‡°ðŸ‡¿",
    XK: "ðŸ‡½ðŸ‡°", // Kosovo
    LV: "ðŸ‡±ðŸ‡»",
    LI: "ðŸ‡±ðŸ‡®",
    LT: "ðŸ‡±ðŸ‡¹",
    LU: "ðŸ‡±ðŸ‡º",
    MT: "ðŸ‡²ðŸ‡¹",
    MD: "ðŸ‡²ðŸ‡©",
    MC: "ðŸ‡²ðŸ‡¨",
    ME: "ðŸ‡²ðŸ‡ª",
    NL: "ðŸ‡³ðŸ‡±",
    MK: "ðŸ‡²ðŸ‡°",
    NO: "ðŸ‡³ðŸ‡´",
    PL: "ðŸ‡µðŸ‡±",
    PT: "ðŸ‡µðŸ‡¹",
    RO: "ðŸ‡·ðŸ‡´",
    RU: "ðŸ‡·ðŸ‡º",
    SM: "ðŸ‡¸ðŸ‡²",
    RS: "ðŸ‡·ðŸ‡¸",
    SK: "ðŸ‡¸ðŸ‡°",
    SI: "ðŸ‡¸ðŸ‡®",
    ES: "ðŸ‡ªðŸ‡¸",
    SE: "ðŸ‡¸ðŸ‡ª",
    CH: "ðŸ‡¨ðŸ‡­",
    TR: "ðŸ‡¹ðŸ‡·",
    UA: "ðŸ‡ºðŸ‡¦",
    GB: "ðŸ‡¬ðŸ‡§",
    VA: "ðŸ‡»ðŸ‡¦",
  };

  useEffect(() => {
    getCities().then(setAllCities);
  }, []);

  const filtered = countryName
    ? allCities.filter(
        (c) => c.country.toLowerCase() === countryName.toLowerCase()
      )
    : allCities;

  const suggestions = query
    ? filtered.filter((c) => c.name.toLowerCase().includes(query.toLowerCase()))
    : [];

  return (
    <div className="city-autocomplete-wrapper">
      <input
        className="input"
        type="text"
        placeholder="search a city"
        value={query}
        onChange={(e) => {
          setQuery(e.target.value);
          setShowSuggestions(true);
        }}
        onKeyDown={(e) => {
          if (
            (e.key === "Enter" || e.key === "Tab") &&
            suggestions.length > 0
          ) {
            e.preventDefault();
            const first = suggestions[0];
            setQuery(first.name);
            onChange(first.id);
            setShowSuggestions(false);
            setQuery("");
          }
        }}
        autoComplete="off"
      />

      {query && showSuggestions && (
        <div className="suggestions-container">
          {suggestions.length > 0 ? (
            suggestions.map((c) => (
              <p
                key={c.id}
                className="suggestions"
                onClick={() => {
                  setQuery(c.name);
                  onChange(c.id);
                  setShowSuggestions(false);
                }}
              >
                <span>
                  {europeFlags[c.country_code]} {c.name}, {c.country}
                </span>
              </p>
            ))
          ) : (
            <p className="suggestions">No city with this name available</p>
          )}
        </div>
      )}
    </div>
  );
}
